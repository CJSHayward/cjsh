#!/usr/bin/env python3
#
# (c) 2012-2018 C.J.S. Hayward, CJSH@CJSHayward.com, CJSHayward.com
#
# Available to you under your choice of the terms of the MIT and GPLv2
# licenses.

import glob
import readline
import os
import re
import shlex
import stat
import subprocess
import sys
import threading
import time

BASH_BUILTINS = ['alias', 'bind', 'builtin', 'caller', 'command', 'declare',
  'echo', 'enable', 'help', 'let', 'local', 'logout', 'mapfile', 'printf',
  'read', 'readarray', 'source', 'type', 'typeset', 'ulimit', 'unalias']

DEBUG = True

EDITOR = os.getenv('EDITOR')

if not EDITOR:
    EDITOR = 'nano'

aliases = {}

background = {
    'gimp': True,
    EDITOR: False,
    }

handlers = {
  '123': 'libreoffice',
  '602': 'libreoffice',
  'bmp': 'gimp',
  'c': EDITOR,
  'cgm': 'libreoffice',
  'conf': EDITOR,
  'cpp': EDITOR,
  'css': EDITOR,
  'csv': EDITOR,
  'dbf': 'libreoffice',
  'deb': 'dpkg -i',
  'dif': 'libreoffice',
  'doc': 'libreoffice',
  'docm': 'libreoffice',
  'docx': 'libreoffice',
  'dot': 'libreoffice',
  'dotm': 'libreoffice',
  'dotx': 'libreoffice',
  'dxf': 'gimp',
  'el': EDITOR,
  'elc': EDITOR,
  'emf': 'gimp',
  'eps': 'gimp',
  'gif': 'gimp',
  'h': EDITOR,
  'htm': EDITOR,
  'html': EDITOR,
  'hwp': 'libreoffice',
  'jpeg': 'gimp',
  'jpg': 'gimp',
  'jtd': 'libreoffice',
  'jtt': 'libreoffice',
  'met': 'gimp',
  'pbm': 'gimp',
  'pcd': 'gimp',
  'pct': 'gimp',
  'pcx': 'gimp',
  'pdb': 'libreoffice',
  'pdf': 'google-chrome',
  'pgm': 'gimp',
  'pl': 'google-chrome',
  'plt': 'gimp',
  'pot': 'libreoffice',
  'potm': 'libreoffice',
  'potx': 'libreoffice',
  'ppm': 'gimp',
  'pps': 'libreoffice',
  'kppt': 'libreoffice',
  'pptm': 'libreoffice',
  'pptx': 'libreoffice',
  'psd': 'gimp',
  'psw': 'libreoffice',
  'pxl': 'libreoffice',
  'py': EDITOR,
  'ras': 'gimp',
  'rpm': 'rpm -i',
  'rtf': 'libreoffice',
  'sda': 'libreoffice',
  'sdc': 'libreoffice',
  'sdd': 'libreoffice',
  'sdp': 'libreoffice',
  'sdw': 'libreoffice',
  'sgf': 'gimp',
  'sgl': 'libreoffice',
  'sgv': 'gimp',
  'svm': 'gimp',
  'sh': EDITOR,
  'slk': 'libreoffice',
  'tbz2': 'tar xvf',
  'tar.bz2': 'tar xvf',
  'tar.lzma': 'tar xzf',
  'tar.gz': 'tar xzf',
  'tga': 'gimp',
  'tgz': 'tar xzf',
  'tif': 'gimp',
  'tiff': 'gimp',
  'tlz': 'tar xzf',
  'txt': EDITOR,
  'uof': 'libreoffice',
  'uop': 'libreoffice',
  'uos': 'libreoffice',
  'uot': 'libreoffice',
  'vor': 'libreoffice',
  'wb2': 'libreoffice',
  'wk1': 'libreoffice',
  'wkx': 'libreoffice',
  'wmf': 'gimp',
  'wpd': 'libreoffice',
  'wps': 'libreoffice',
  'xbm': 'gimp',
  'xcf': 'gimp',
  'xls': 'libreoffice',
  'xlsb': 'libreoffice',
  'xlsm': 'libreoffice',
  'xlsx': 'libreoffice',
  'xltm': 'libreoffice',
  'xltx': 'libreoffice',
  'xlt': 'libreoffice',
  'xlw': 'libreoffice',
  'xpm': 'gimp',
  'xml': EDITOR,
  'zip': 'unzip',
  }

heirarchy = []

def act_on(filename):
    if not filename:
        return None
    try:
        handle = open(filename, 'rb')
        shebang = handle.read(2)
        if shebang == bytes([35, 33]):
            return EDITOR + ' ' + filename
    except IOError:
        pass
    end = filename.lower().split('.')[-1]
    if end in handlers:
        return handlers[end]
    else:
        return filename

def is_literal_command(command):
    word = command.split(' ')[0]
    if subprocess.getoutput('which ' + word) or word in BASH_BUILTINS:
        return True
    else:
        return False
        

trace_handle = open('/tmp/psh_trace.out', 'w')

def log(message):
    if DEBUG:
        if type(message) == type(''):
            sys.stderr.write(message + '\n')
        else:
            sys.stderr.write(repr(message) + '\n')
        sys.stderr.flush()

def trace(identifier):
    if DEBUG:
        trace_handle.write(str(identifier) + '\n')
        trace_handle.flush()

def repr_log(repr_object):
    trace(repr(repr_object))

rlog = repr_log

username = subprocess.getoutput('whoami')
if username.endswith('\n'):
    username = username[:-1]
hostname = subprocess.getoutput('hostname -f')
if hostname.endswith('\n'):
    hostname = hostname[:-1]

def wrap(argument):
    return "'" + argument.replace("'", "'\\''") + "'"

try:
    readline.read_history_file(os.path.join(os.getenv('HOME'), '.psh_history'))
except IOError:
    pass

class StoppableThread(threading.Thread):
    def __init__(self):
        super(StoppableThread, self).__init__()
        self._stop_event = threading.Event()
    def run(self):
        for root, directories, files in os.walk('/'):
            if self.stopped():
                return
            if root == '/' and 'Volumes' in directories:
                directories.remove('Volumes')
            if root == '/' and 'cygdrive' in directories:
                directories.remove('cygdrive')
            for file in files:
                heirarchy.append(os.path.join(root, file))
        open(os.path.join(os.getenv('HOME'), '.psh_file_listing_' +
            str(os.getpid())), 'w').write('\n'.join(heirarchy) + '\n')
        os.rename(os.path.join(os.getenv('HOME'), '.psh_file_listing_' +
            str(os.getpid())), os.path.join(os.getenv('HOME'),
            '.psh_file_listing'))
        if '' in heirarchy:
            heirarchy.remove('')
    def stop(self):
        self._stop_event.set()
    def stopped(self):
        return self._stop_event.is_set()

trace(1)
if True:
#try:
    trace(2)
    if os.path.exists(os.path.join(os.getenv('HOME'), '.pshrc')):
        lines = open(os.path.join(os.getenv('HOME'),
          '.pshrc')).read().split('\n')
    else:
        lines = []
    for line in lines:
        trace('3|')
        if line:
            split_line = shlex.split(line)
            trace('4|')
            if split_line[0] and split_line[0] == 'alias':
                remainder = line[len('alias') + 1:]
                break_point = remainder.find('=')
                key = remainder[:break_point]
                value = remainder[break_point + 1:]
                aliases[key] = value
                continue
            elif re.match(r'\S+=', line):
                break_point = line.find('=')
                key = line[:break_point]
                value = line[break_point + 1:]
                os.setenv(key, value)
            if line[0] == '\t':
                trace('5|')
            else:
                trace('6|')
                indented = 0
                starting = True
                if lines:
                    split_line = shlex.split(line, True)
                    trace('119|')
                    if not split_line:
                        trace('120|')
                        pass
                    elif len(split_line) == 1:
                        trace('121|')
                        if os.path.exists(line):
                            if os.path.isdir(line):
                                os.chdir(line)
                            else:
                                os.system(line)
                        else:
                            os.system(line)
                    else:
                        trace('122|')
                        globbed_line = []
                        globbed_line.append(split_line[0])
                        for entry in split_line[1:]:
                            trace('123|')
                            if glob.glob(entry):
                                trace('124|')
                                globbed_line += glob.glob(entry)
                            else:
                                trace('125|')
                                globbed_line.append(entry)
                        searched_line = []
                        searched_line.append(globbed_line[0])
                        for entry in globbed_line[1:]:
                            trace('126|')
                            if entry[0] == '-':
                                trace('127|')
                                searched_line.append(entry)
                            elif '/' in entry:
                                trace('128|')
                                searched_line.append(entry)
                            else:
                                trace('129|')
                                if (os.path.join(os.getenv('PWD'), entry) in
                                  heirarchy):
                                    trace('130|')
                                    searched_line.append(entry)
                                else:
                                    trace('131|')
                                    found_in_local_heirarchy = False
                                    found_in_home_heirarchy = False
                                    for filename in heirarchy:
                                        trace('132|')
                                        if filename.startswith(
                                          os.getenv('PWD')):
                                            trace('133|')
                                            if filename.endswith('/' + entry):
                                                trace('134|')
                                                searched_line.append(filename)
                                                found_in_local_heirarchy = True
                                        if os.getenv('PWD') != os.getenv('HOME'):
                                            trace('135|')
                                            if not found_in_local_heirarchy:
                                                trace('136|')
                                                if filename.startswith(
                                                  os.getenv('HOME')):
                                                    trace('137|')
                                                    if filename.endswith('/' +
                                                      entry):
                                                        trace('138|')
                                                        searched_line.append(
                                                          filename)
                                                        found_in_home_heirarchy = True
                                        if (not found_in_local_heirarchy and not
                                          found_in_home_heirarchy):
                                            trace('139|')
                                            for filename in heirarchy:
                                                trace('140|')
                                                if filename.endswith('/' + entry):
                                                    trace('141|')
                                                    searched_line.append(filename)
                        if len(line) == 1 and os.path.isdir(line[0]):
                            trace('142|')
                            os.chdir(line[0])
                        else:
                            trace('143|')
                            if is_literal_command(line[0]):
                                os.system(' '.join(line))
                            elif (len(line) == 1 and os.path.isfile(line[0]) and
                              subprocess.getoutput('which ' + line[0]) and
                              bool(os.stat(subprocess.getoutput('which ' + line[0])) &
                              stat.S_IXUSR)):
                                trace('144|')
                                os.system(wrap(line[0]))
                            else:
                                trace('145|')
                                previous_handler = None
                                sequence = []
                                rlog(sys.argv)
                                for argument in line:
                                    trace('146|')
                                    trace(6)
                                    for extension in handlers:
                                        trace(7)
                                        trace('147|')
                                        if argument.lower().endswith('.' +
                                          extension):
                                            trace(8)
                                            trace('148|')
                                            handler = handlers[extension]
                                            if background[handler]:
                                                trace('149|')
                                                trace(9)
                                                os.system(handler + ' ' +
                                                  wrap(argument) +
                                                  ' 2> /dev/null &')
                                            else:
                                                trace('150|')
                                                trace(10)
                                                if handler == previous_handler:
                                                    trace('151|')
                                                    trace(11)
                                                    sequence.append(argument)
                                                else:
                                                    trace('152|')
                                                    trace(12)
                                                    os.system(previous_handler
                                                      + ' ' + ' '.join([wrap(x)
                                                      for x in sequence]))
                                                    previous_hander = handler
                                                    sequence = [argument]
                                trace(13)
                                if sequence:
                                    trace('153|')
                                    trace(14)
                                    os.system(previous_handler + ' ' +
                                      ' '.join([wrap(x) for x
                                      in sequence]))
                            trace(15)
                trace(12)
                split_line = shlex.split(line, True)
                if is_literal_command(line[0]):
                    trace(13)
                    command = line
                    os.system(command)
                else:
                    trace(14)
                    globbed_line = []
                    globbed_line.append(split_line[0])
                    for entry in split_line[1:]:
                        trace(15)
                        if glob.glob(entry):
                            trace(16)
                            globbed_line += glob.glob(entry)
                        else:
                            trace(17)
                            globbed_line.append(entry)
                    searched_line = []
                    searched_line.append(globbed_line[0])
                    for entry in globbed_line[1:]:
                        trace(18)
                        if entry[0] == '-':
                            trace(19)
                            searched_line.append(entry)
                        elif '/' in entry:
                            trace(20)
                            searched_line.append(entry)
                        else:
                            trace(21)
                            if (os.path.join(os.getenv('PWD'), entry) in
                              heirarchy):
                                trace(22)
                                searched_line.append(entry)
                            else:
                                trace(23)
                                found_in_local_heirarchy = False
                                found_in_home_heirarchy = False
                                for filename in heirarchy:
                                    trace(24)
                                    if filename.startswith(os.getenv('PWD')):
                                        trace(25)
                                        if filename.endswith('/' + entry):
                                            trace(26)
                                            searched_line.append(filename)
                                            found_in_local_heirarchy = True
                                    if os.getenv('PWD') != os.getenv('HOME'):
                                        trace(27)
                                        if not found_in_local_heirarchy:
                                            trace(28)
                                        if filename.startswith(
                                          os.getenv('HOME')):
                                            trace(28)
                                            if filename.endswith('/' + entry):
                                                trace(29)
                                                searched_line.append(filename)
                                                found_in_home_heirarchy = True
                                    if (not found_in_local_heirarchy and not
                                      found_in_home_heirarchy):
                                        trace(30)
                                        for filename in heirarchy:
                                            trace(31)
                                            if filename.endswith('/' + entry):
                                                trace(32)
                                                searched_line.append(filename)
                    command = ' '.join(searched_line)
        elif lines:
            trace(33)
            to_exec = ''
            for line in lines:
                trace(34)
                if line and line[0] == ' ':
                    to_exec += line[1:] + '\n'
                else:
                    to_exec += line + '\n'
            to_exec = re.sub('%\((\w+)\)\w', r'" + str(\1) + "', to_exec)
            try:
                trace(35)
                if type(to_exec) == type(''):
                    eval(to_exec)
                else:
                    exec(to_exec, globals(), locals())
                line = ''
            except Exception as error:
                trace(36)
                print(to_exec)
                print("There was an error: {0}".format(error))

#except IOError:
    #trace(37)
    #pass
if len(sys.argv) > 1:
    trace(38)
    lines = open(sys.argv[1]).read().split('\n')
    index = -1
    for line in lines:
        index += 1
        trace(39)
        if line:
            trace(40)
            if line[0] == '\t':
                trace(41)
                lines.append(line)
            else:
                trace(42)
                indented = 0
                starting = True
                if lines:
                    trace(43)
                    for character in lines[-1]:
                        trace(44)
                        if starting and character == '\t':
                            trace(45)
                            indented += 1
                        if character != '\t':
                            trace(46)
                            starting = False
                    if re.match(line, r':\s*#.*$'):
                        trace(47)
                        indented += 1
                split_line = shlex.split(line, True)
                if is_literal_command(split_line[0]):
                    trace(48)
                    command = line
                else:
                    trace(49)
                    globbed_line = []
                    globbed_line.append(split_line[0])
                    for entry in split_line[1:]:
                        trace(50)
                        if glob.glob(entry):
                            trace(51)
                            globbed_line += glob.glob(entry)
                        else:
                            trace(52)
                            globbed_line.append(entry)
                    searched_line = []
                    searched_line.append(globbed_line[0])
                    for entry in globbed_line[1:]:
                        trace(53)
                        if entry[0] == '-':
                            trace(54)
                            searched_line.append(entry)
                        elif '/' in entry:
                            trace(55)
                            searched_line.append(entry)
                        else:
                            trace(56)
                            if (os.path.join(os.getenv('PWD'), entry) in
                              heirarchy):
                                trace(57)
                                searched_line.append(entry)
                            else:
                                trace(58)
                                found_in_local_heirarchy = False
                                found_in_home_heirarchy = False
                                for filename in heirarchy:
                                    trace(59)
                                    if filename.startswith(os.getenv('PWD')):
                                        trace(60)
                                        if filename.endswith('/' + entry):
                                            trace(61)
                                            searched_line.append(filename)
                                            found_in_local_heirarchy = True
                                if os.getenv('PWD') != os.getenv('HOME'):
                                    trace(62)
                                    if not found_in_local_heirarchy:
                                        trace(63)
                                        if (filename.startswith(os.getenv(
                                          'HOME'))):
                                            trace(64)
                                            if filename.endswith('/' + entry):
                                                trace(65)
                                                searched_line.append(filename)
                                                found_in_home_heirarchy = True
                                if (not found_in_local_heirarchy and not
                                  found_in_home_heirarchy):
                                    trace(66)
                                    for filename in heirarchy:
                                        trace(67)
                                        if filename.endswith('/' + entry):
                                            trace(68)
                                            searched_line.append(filename)
                    command = ' '.join(searched_line)
                lines[index] = (('\t' * indented) + 'os.system("' +
                  command + '")')
                print('2')
                eval(lines.join('\n'))
        elif lines:
            trace(69)
            to_exec = ''
            for line in lines:
                trace(70)
                to_exec += line[1:] + '\n'
            to_exec = re.sub(r'%\((\w+)\)\w', r'" + str(\1) + "', to_exec)
            try:
                trace(71)
                exec(to_exec, globals(), locals())
                line = ''
            except Exception as error:
                trace(72)
                print(to_exec)
                print('There was an error: {0}'.format(error))


if not ('-s' in sys.argv or '--silent' in sys.argv):
    print(
      "Welcome to psh. Please visit [1mCJSHayward.com[0m! Hit '?' for help.")
    print('--')
while True:
    print('')
    print(username + ' @ ' + hostname + ' - ' +
        time.asctime(time.localtime(time.time())))
    print(os.getcwd())
    try:
        trace(73)
        sys.stdout.write('psh> ')
        sys.stdout.flush()
        line = sys.stdin.readline()
        if not line:
            print('\nBye!')
            sys.exit(0)
    except EOFError:
        trace(74)
        print('')
        sys.exit(0)
    line = line[:-1]
    split_line = shlex.split(line)

    if line and line[0] == ' ':
        trace(75)
        line = line.replace('    ', '\t')
    if line == '?':
        trace(76)
        print('''
psh is an experimental Python-powered Linux/Unix/Mac shell by C.J.S. Hayward.
It is designed to allow commands such as editors to find appropriate files that
don't happen to be in your current directory, and to allow a powerful Python
variant for shell scripting.

As a minor feature, it imitates the most famous Python Easter egg.
''')
    elif line == "import this":
        trace(77)
        os.system('''echo "
The un-Zen of psh by C.J.S. Hayward, CJSHayward@pobox.com, CJSHayward.com:

Tabs are for Python.

You can mix Python with system shell commands: no indent for the latter.
Leave a blank line after pure or mixed Python to execute.
    If you're a Pythonista, try it.

psh> 	for index in range(10):
---> 		echo %(index)d
---> 

Prepend a tab to a line to enter a command Python-mode.
    '^\\t' == '^    '

psh is a second take on Unix files and shells after modern searching and
usability.

(But it's only a second pass.)

**Use the Source, Luke!**
" | less''')
    elif split_line[0] in aliases:
        trace('74B')
        line = line.replace(split_line[0], aliases[split_line[0]], 1)
        os.system(line)
    elif split_line[0] and split_line[0] == 'alias':
        remainder = line[len('alias') + 1:]
        break_point = remainder.find('=')
        key = remainder[:break_point]
        value = remainder[break_point + 1:]
        aliases[key] = value
    elif '=' in line:
        key = line[:line.find('=')]
        value = line[line.find('=') + 1:]
        os.setenv(key, value)
    elif split_line[0] and split_line[0] == 'cd':
        trace(78)
        output = subprocess.getoutput(line + ' && pwd')
        if output.startswith('/'):
            trace(79)
            os.chdir(output)
        else:
            trace(80)
            sys.stderr.write(output)
    elif line.strip() in ['exit', 'logout', 'quit']:
        trace(81)
        print('')
        sys.exit(0)
    elif split_line[0] == 'run':
        os.system(line.replace('run', '', 1).strip())
    elif line and line[0] == '\t':
        trace(82)
        lines = [line]
        while line != '':
            trace(83)
            try:
                trace(84)
                line = input('---> ')
            except EOFError:
                trace(85)
                print('')
                sys.exit(0)
            if line:
                trace(86)
                if line[0] == '\t':
                    trace(87)
                    lines.append(line)
                else:
                    trace(88)
                    indented = 0
                    starting = True
                    if lines:
                        trace(89)
                        for character in lines[-1]:
                            trace(90)
                            if starting and character == '\t':
                                trace(91)
                                indented += 1
                            if character != '\t':
                                trace(92)
                                starting = False
                        if re.match(line, r':\s*#.*$'):
                            indented += 1
                            trace(93)
                    split_line = shlex.split(line, True)
                    if is_literal_command(split_line[0]):
                        trace(94)
                        command = line
                    else:
                        trace(95)
                        globbed_line = []
                        globbed_line.append(split_line[0])
                        for entry in split_line[1:]:
                            trace(96)
                            if glob.glob(entry):
                                trace(97)
                                globbed_line += glob.glob(entry)
                            else:
                                trace(98)
                                globbed_line.append(entry)
                        searched_line = []
                        searched_line.append(globbed_line[0])
                        for entry in globbed_line[1:]:
                            trace(99)
                            if entry[0] == '-':
                                trace(100)
                                searched_line.append(entry)
                            elif '/' in entry:
                                trace(101)
                                searched_line.append(entry)
                            else:
                                trace(102)
                                if os.path.join(os.getenv('PWD'), entry) in heirarchy:
                                    trace(103)
                                    searched_line.append(entry)
                                else:
                                    trace(104)
                                    found_in_local_heirarchy = False
                                    found_in_home_heirarchy = False
                                    for filename in heirarchy:
                                        trace(105)
                                        if filename.startswith(os.getenv('PWD')):
                                            trace(106)
                                            if filename.endswith('/' + entry):
                                                trace(107)
                                                searched_line.append(filename)
                                                found_in_local_heirarchy = True
                                    if os.getenv('PWD') != os.getenv('HOME'):
                                        trace(108)
                                        if not found_in_local_heirarchy:
                                            trace(109)
                                            if filename.startswith(os.getenv('HOME')):
                                                trace(110)
                                                if filename.endswith('/' + entry):
                                                    trace(111)
                                                    searched_line.append(filename)
                                                    found_in_home_heirarchy = True
                                    if not found_in_local_heirarchy and not found_in_home_heirarchy:
                                        trace(112)
                                        for filename in heirarchy:
                                            trace(113)
                                            if filename.endswith('/' + entry):
                                                trace(114)
                                                searched_line.append(filename)
                        command = ' '.join(searched_line)
                    lines.append(('\t' * indented) + 'os.system("' +
                        command + '")')
            elif lines:
                trace(115)
                to_exec = ''
                for line in lines:
                    trace(116)
                    to_exec += line[1:] + '\n'
                to_exec = re.sub('%\((\w+)\)\w', r'" + str(\1) + "', to_exec)
                try:
                    trace(117)
                    exec(to_exec, globals(), locals())
                    line = ''
                except Exception as error:
                    trace(118)
                    print(to_exec)
                    print("There was an error: {0}".format(error))
                readline.write_history_file(os.path.join(os.getenv('HOME'), 
                    '.psh_history'))

    else:
        split_line = shlex.split(line, True)
        trace(119)
        if not split_line:
            trace('119B')
            pass
        elif len(split_line) == 1:
            trace(120)
            if os.path.exists(line):
                if os.path.isdir(line):
                    os.chdir(line)
                else:
                    os.system(act_on(line))
            else:
                os.system(line)
        else:
            trace(121)
            globbed_line = []
            globbed_line.append(split_line[0])
            for entry in split_line[1:]:
                trace(122)
                if glob.glob(entry):
                    trace(123)
                    globbed_line += glob.glob(entry)
                else:
                    trace(124)
                    globbed_line.append(entry)
            searched_line = []
            searched_line.append(globbed_line[0])
            for entry in globbed_line[1:]:
                trace(125)
                if entry[0] == '-':
                    trace(126)
                    searched_line.append(entry)
                elif '/' in entry:
                    trace(127)
                    searched_line.append(entry)
                else:
                    trace(128)
                    if os.path.join(os.getenv('PWD'), entry) in heirarchy:
                        trace(129)
                        searched_line.append(entry)
                    else:
                        trace(130)
                        found_in_local_heirarchy = False
                        found_in_home_heirarchy = False
                        for filename in heirarchy:
                            trace(131)
                            if filename.startswith(os.getenv('PWD')):
                                trace(132)
                                if filename.endswith('/' + entry):
                                    trace(133)
                                    searched_line.append(filename)
                                    found_in_local_heirarchy = True
                            if os.getenv('PWD') != os.getenv('HOME'):
                                trace(134)
                                if not found_in_local_heirarchy:
                                    trace(135)
                                    if filename.startswith(os.getenv('HOME')):
                                        trace(136)
                                        if filename.endswith('/' + entry):
                                            trace(137)
                                            searched_line.append(filename)
                                            found_in_home_heirarchy = True
                            if (not found_in_local_heirarchy and not
                              found_in_home_heirarchy):
                                trace(138)
                                for filename in heirarchy:
                                    trace(139)
                                    if filename.endswith('/' + entry):
                                        trace(140)
                                        searched_line.append(filename)
            if len(line) == 1 and os.path.isdir(line[0]):
                trace(141)
                os.chdir(line[0])
            else:
                trace(142)
                log(split_line)
                if is_literal_command(split_line[0]):
                    trace('142B')
                    os.system(' '.join(split_line))
                elif (len(split_line) == 1 and os.path.isfile(split_line[0])
                  and subprocess.getoutput('which ' + split_line[0]) and
                  bool(os.stat(subprocess.getoutput('which ' + split_line[0])) &
                  stat.S_IXUSR)):
                    trace(143)
                    os.system(wrap(split_line[0]))
                else:
                    trace(144)
                    previous_handler = None
                    sequence = []
                    rlog(sys.argv)
                    for argument in line:
                        trace(145)
                        trace(6)
                        for extension in handlers:
                            trace(7)
                            trace(146)
                            if argument.lower().endswith('.' + extension):
                                trace(8)
                                trace(147)
                                handler = handlers[extension]
                                if background[handler]:
                                    trace(148)
                                    trace(9)
                                    os.system(handler + ' ' + wrap(argument) +
                                      ' 2> /dev/null &')
                                else:
                                    trace(149)
                                    trace(10)
                                    if handler == previous_handler:
                                        trace(150)
                                        trace(11)
                                        sequence.append(argument)
                                    else:
                                        trace(151)
                                        trace(12)
                                        os.system(previous_handler + ' ' + 
                                          ' '.join([wrap(x) for x in sequence]))
                                        previous_hander = handler
                                        sequence = [argument]
                    trace(13)
                    if sequence:
                        trace(152)
                        trace(14)
                        os.system(previous_handler + ' ' + ' '.join([wrap(x) for x
                          in sequence]))
                trace(15)
            readline.write_history_file(os.path.join(os.getenv('HOME'), 
                '.psh_history'))
